{
	"Add entryComponents": {
		"scope": "javascript,typescript",
		"prefix": "addEntry",
		"body": [			
			"    ColorsComponent,",
			"    MauveComponent,",
			"    OlympicComponent,",
			"    CarnationComponent"			
		],
		"description": "Add entryComponents"
	},	
	"resolver service": {
		"prefix": "resolverService",
		"body": "private componentFactoryResolver: ComponentFactoryResolver",
		"description": "componentFactoryResolver service"
	},	
	"wrapper variables": {
		"prefix": "wrapperVars",
		"body": [
			"@ViewChild('target', { read: ViewContainerRef, static: true }) target: ViewContainerRef;",
			"@Input() type: string;",
			"@Input() index: number;",
			"cmpRef: ComponentRef<ColorBox>;",
			"private isViewInitialized: boolean = false;"
		],
		"description": "wrapper variables"
	},		
	"wrapper update switch": {
		"prefix": "wrapperSwitch",
		"body": [
			"let componentType: Type<ColorBox> = ColorsComponent;",
			"        switch (this.type) {",
			"            case 'plum': { componentType = ColorsComponent; break; }",
			"            case 'mauve': { componentType = MauveComponent; break; }",
			"            case 'carnation': { componentType = CarnationComponent; break; }",
			"            case 'olympic': { componentType = OlympicComponent; break; }",			
			"            default: {",
			"                componentType = ColorsComponent;",
			"                break;",
			"            }",
			"        }"
		],
		"description": "wrapper update switch"
	},
	"wrapper update factory": {
		"prefix": "wrapperFactory",
		"body": [
			"// make a factory with the correct component type",
			"let factory = this.componentFactoryResolver.resolveComponentFactory(componentType);"			
		],
		"description": "wrapper update factory"
    },
    "assignFactory": {
        "prefix": "assignFactory",
        "body": [
            "// create the component and assign to target div element",
			"this.cmpRef = this.target.createComponent(factory)"
        ],
        "description": "assign the factory to the view child target"
    },
    "indexInput":{
        "prefix": "indexInput",
        "body": [
            "// to access the created instance use",
			"this.cmpRef.instance.index = this.index;"
        ],
        "description": "set the index value"
    }
}